class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int t = 0;
        int n = grid.size(), m = grid[0].size();
        vector<vector<bool>> visited(n, vector<bool> (m, false));
        queue<pair<pair<int, int>, int>> q;
        
        
        for(int i = 0 ; i < n ; i++) {
            for(int j = 0 ; j < m ; j++) {
                if(grid[i][j] == 2) {
                   q.push({{i, j}, 0});
                }
            }
        }
        while(!q.empty()) {
            auto p = q.front();
            q.pop();
            int i = p.first.first;
            int j = p.first.second;
            int time = p.second;
            
            t = max(t, time);
            // cout<<i<<" "<<j<<" "<<time<<endl;
            
            if(i - 1 >= 0 && !visited[i-1][j] && grid[i-1][j] == 1) {
                q.push({{i-1, j}, 1+time});
                visited[i-1][j] = true;
                grid[i-1][j] = 2;
            }
            if(j - 1 >= 0 && !visited[i][j-1]  && grid[i][j-1] == 1) {
                q.push({{i, j-1}, 1+time});
                visited[i][j-1] = true;
                grid[i][j-1] = 2;
            }
            if(i + 1 < n && !visited[i+1][j]  && grid[i+1][j] == 1) {
                q.push({{i+1, j}, 1+time});
                visited[i+1][j] = true;
                grid[i+1][j] = 2;
            }
            if(j + 1 < m && !visited[i][j+1]  && grid[i][j+1] == 1) {
                q.push({{i, j+1}, 1+time});
                visited[i][j+1] = true;
                grid[i][j+1] = 2;
            }
        }
        
        for(int i = 0 ; i < n ; i++) {
            for(int j = 0 ; j < m ; j++) {
                if(grid[i][j] == 1) {
                    // cout<<i<<" "<<j<<" ";
                    return -1;
                }
            }
        }
        return t;
    }
};
                               