// { Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};


Node *buildTree(string str) {
    // Corner Case
    if (str.length() == 0 || str[0] == 'N')
        return NULL;

    // Creating vector of strings from input
    // string after spliting by space
    vector<string> ip;

    istringstream iss(str);
    for (string str; iss >> str;)
        ip.push_back(str);

    // Create the root of the tree
    Node *root = new Node(stoi(ip[0]));

    // Push the root to the queue
    queue<Node *> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while (!queue.empty() && i < ip.size()) {

        // Get and remove the front of the queue
        Node *currNode = queue.front();
        queue.pop();

        // Get the current Node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if (currVal != "N") {

            // Create the left child for the current Node
            currNode->left = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if (i >= ip.size())
            break;
        currVal = ip[i];

        // If the right child is not null
        if (currVal != "N") {

            // Create the right child for the current Node
            currNode->right = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}


 // } Driver Code Ends
//User function Template for C++

class Solution {
  public:
    int ans;
    unordered_map<int, pair<int, int>> map;
    unordered_map<int, int> map2;
    int helper(Node* root) {
        if(root == NULL) return -1;
        
        int left = 1 + helper(root->left);
        int right = 1 + helper(root->right);
        
        map[root->data] = {left, right};
        // cout<<root->data<<"-"<<max(left, right)<<endl;
        return max(left, right);
    }
    bool findAns(Node* root, int &target) {
        if(root == NULL) return false;
        if(root->data == target) {
            ans = max(map[target].first, map[target].second);
            map2[root->data] = 0;
            return true; 
        }
        if(findAns(root->left, target)) {
            ans = max(ans, 1 + map2[root->left->data] + map[root->data].second);
            map2[root->data] = map2[root->left->data] + 1;
            // cout<<root->data<<"-"<<ans<<endl;
            return true;
        }
        if(findAns(root->right, target)) {
            ans = max(ans, 1 + map2[root->right->data] + map[root->data].first);
            map2[root->data] = map2[root->right->data] + 1;
            // cout<<root->data<<"-"<<ans<<endl;
            return true;
        }
        
        return false;
    }
    int minTime(Node* root, int target) 
    {
        // Your code goes here
        map.clear();
        helper(root);
        ans = 0;
        findAns(root, target);
        
        return ans;
    }
};

// { Driver Code Starts.

int main() 
{
    int tc;
    scanf("%d ", &tc);
    while (tc--) 
    {    
        string treeString;
        getline(cin, treeString);
        // cout<<treeString<<"\n";
        int target;
        cin>>target;
        // cout<<target<<"\n";

        Node *root = buildTree(treeString);
        Solution obj;
        cout<<obj.minTime(root, target)<<"\n"; 

        cin.ignore();

    }


    return 0;
}
  // } Driver Code Ends