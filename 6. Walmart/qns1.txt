class Solution {
public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {
        vector<vector<pair<int, double>>> adj(n, vector<pair<int, double>> ());
        int m = edges.size();
        for(int i = 0 ; i < m ; i++) {
            adj[edges[i][0]].push_back({edges[i][1], succProb[i]});
            adj[edges[i][1]].push_back({edges[i][0], succProb[i]});
        }
        
        vector<double> probs(n, 0);
        priority_queue<pair<double, int>> pq;
        pq.push({1, start});
        
        while(!pq.empty()) {
            auto p = pq.top();
            pq.pop();
            for(auto e : adj[p.second]) {
                if(probs[e.first] < p.first * e.second) {
                    probs[e.first] = p.first * e.second;
                    pq.push({probs[e.first], e.first});
                }
            }
        }
        
        return probs[end];
    }
};