/**
 * // This is the MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * class MountainArray {
 *   public:
 *     int get(int index);
 *     int length();
 * };
 */

class Solution {
public:
    int searchUp(int lo, int hi, int &target, MountainArray &mountainArr, vector<int> &arr) {
        while(lo <= hi) {
            int mid = (lo + hi) / 2;
            
            if(arr[mid] == -1) arr[mid] = mountainArr.get(mid);
            // cout<<arr[mid]<<endl;
            
            if(target == arr[mid]) return mid;
            else if(target > arr[mid]) lo = mid+1;
            else hi = mid-1;
        }
        return -1;
    }
    int searchDown(int lo, int hi, int &target, MountainArray &mountainArr, vector<int> &arr) {
        while(lo <= hi) {
            int mid = (lo + hi) / 2;
            
            if(arr[mid] == -1) arr[mid] = mountainArr.get(mid);
            
            if(target == arr[mid]) return mid;
            else if(target > arr[mid]) hi = mid-1;
            else lo = mid+1;
        }
        return -1;
    }
    int findInMountainArray(int target, MountainArray &mountainArr) {
        int n = mountainArr.length();
        
        int start = mountainArr.get(0);
        int end = mountainArr.get(n-1);
        
        if(target < start && target < end) return -1;
        
        if(target == start) return 0;
        vector<int> arr(n, -1);
        
        int lo = 0, hi = n-1, top;
        
        while(lo <= hi) {
            int mid = (lo + hi) / 2;
            
            cout<<mid<<endl;
            if(mid-1 >= 0 && arr[mid-1] == -1) arr[mid-1] = mountainArr.get(mid-1);
            if(arr[mid] == -1) arr[mid] = mountainArr.get(mid);
            
            if(mid-1 >= 0 && arr[mid] < arr[mid-1]) {
                hi = mid-1;
            }
            else {
                if(mid + 1 < n && arr[mid+1] == -1) arr[mid+1] = mountainArr.get(mid+1);
                if(mid+1 >= n || arr[mid] > arr[mid+1]) {
                    top = mid;
                    break;
                }
                else lo = mid+1;
            }
        }
        
        if(target > arr[top]) return -1;
        
        if(target == arr[top]) return top;
        
        // cout<<start<<" "<<end<<" "<<arr[top];
        if(start < target) {
            int val = searchUp(1, top-1, target, mountainArr, arr);
            cout<<val;
            if(val != -1) return val;
        }
        if(target == end) return n-1;
        if(end < target) {
            int val = searchDown(top+1, n-2, target, mountainArr, arr);
            if(val != -1) return val;
        }
        return -1;
    }
};