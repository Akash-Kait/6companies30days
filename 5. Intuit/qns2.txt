// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
public:
    bool dfs(int i, int j, vector<vector<char>>& board, string &word, int k) {
        if(k == word.size()-1) return true;
        
        board[i][j] = '0';
        int n = board.size(), m = board[0].size();
        if(i-1 >= 0 && board[i-1][j] == word[k+1]) if(dfs(i-1, j, board, word, k+1)) {
            board[i][j] = word[k];
            return true;
        }
        if(j-1 >= 0 && board[i][j-1] == word[k+1]) if(dfs(i, j-1, board, word, k+1)) {
            board[i][j] = word[k];
            return true;
        }
        if(i+1 < n && board[i+1][j] == word[k+1]) if(dfs(i+1, j, board, word, k+1)) {
            board[i][j] = word[k];
            return true;
        }
        if(j+1 < m && board[i][j+1] == word[k+1]) if(dfs(i, j+1, board, word, k+1)) {
            board[i][j] = word[k];
            return true;
        }
        
        board[i][j] = word[k];
        return false;
        
    }
    bool isWordExist(vector<vector<char>>& board, string word) {
        // Code here
        int n = board.size(), m = board[0].size();
        
        vector<vector<bool> > visited(n, vector<bool> (m, false));
        
        for(int i = 0 ; i < n ; i++) {
            for(int j = 0 ; j < m ; j++) {
                if(board[i][j] == word[0] && dfs(i, j, board, word, 0)) return true;
            }
        }
        return false;
    }
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n, m;
		cin >> n >> m;
		vector<vector<char>>board(n, vector<char>(m, '*'));
		for(int i = 0; i < n; i++)
			for(int j = 0; j < m; j++)
				cin >> board[i][j];
		string word;
		cin >> word;
		Solution obj;
		bool ans = obj.isWordExist(board, word);
		if(ans)
			cout << "1\n";
		else cout << "0\n";
	}
	return 0;
}  // } Driver Code Ends