class Solution {
public:
    void dfs(int city, vector<vector<int>>& adj, vector<bool>& vis) {
        if(vis[city]) return;
        
        vis[city] = true;
        
        for(auto e : adj[city]) dfs(e, adj, vis);
    }
    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size(), m = isConnected[0].size();
        
        vector<vector<int>> adj(n, vector<int> ());
        vector<bool> vis(n, false);
        
        for(int i = 0 ; i < n ; i++) {
            for(int j = 0 ; j < m ; j++) {
                if(isConnected[i][j]) {
                    adj[i].push_back(j);
                    adj[j].push_back(i);
                }
            }
        }
        
        int ans = 0;
        for(int i = 0 ; i < n ; i++) {
            if(!vis[i]) {
                dfs(i, adj, vis);
                ans++;
            }
        }
        
        return ans;
    }
};
    