// { Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
// User function Template for C++
class Solution{
    public:
    void helper(int i, vector<bool> &visited, vector<int> &topo, vector<vector<int>> &adj) {
        visited[i] = true;
        
        for(auto j : adj[i]) {
            if(!visited[j]) helper(j, visited, topo, adj);
        }
        
        topo.push_back(i);
    }
    string findOrder(string dict[], int N, int K) {
        //code here
        vector<vector<int>> adj(K, vector<int> ());
        
        for(int i = 1 ; i < N ; i++) {
            string s1 = dict[i-1], s2 = dict[i];
            
            int n = min(s1.size(), s2.size());
            for(int j = 0 ; j < n ; j++) {
                if(s1[j] != s2[j]) {
                    adj[s1[j]-'a'].push_back(s2[j]-'a');
                    break;
                }
            }
        }
        
        vector<bool> visited(K, false);
        vector<int> topo;
        
        for(int i = 0 ; i < K ; i++) {
            if(!visited[i]) helper(i, visited, topo, adj);
        }
        
        string ans;
        
        for(int i = topo.size()-1 ; i >= 0 ; i--) ans.push_back(topo[i] + 'a');
        
        return ans;
    }
};

// { Driver Code Starts.
string order;
bool f(string a, string b) {
    int p1 = 0;
    int p2 = 0;
    for (int i = 0; i < min(a.size(), b.size()) and p1 == p2; i++) {
        p1 = order.find(a[i]);
        p2 = order.find(b[i]);
        //	cout<<p1<<" "<<p2<<endl;
    }

    if (p1 == p2 and a.size() != b.size()) return a.size() < b.size();

    return p1 < p2;
}

// Driver program to test above functions
int main() {
    int t;
    cin >> t;
    while (t--) {
        int N, K;
        cin >> N >> K;
        string dict[N];
        for (int i = 0; i < N; i++) cin >> dict[i];
        
        Solution obj;
        string ans = obj.findOrder(dict, N, K);
        order = "";
        for (int i = 0; i < ans.size(); i++) order += ans[i];

        string temp[N];
        std::copy(dict, dict + N, temp);
        sort(temp, temp + N, f);

        bool f = true;
        for (int i = 0; i < N; i++)
            if (dict[i] != temp[i]) f = false;

        if(f)cout << 1;
        else cout << 0;
        cout << endl;
    }
    return 0;
}
  // } Driver Code Ends