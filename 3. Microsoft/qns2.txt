// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution {
public:
    bool cycle(vector<vector<int>> &adj, vector<bool> &visited, int i, vector<bool> &stack) {
        stack[i] = true;
        
        if(!visited[i]) {
            visited[i] = true;
            for(auto e : adj[i]) {
                if(!visited[e] && cycle(adj, visited, e, stack)) return true;
                if(stack[e]) return true;
            }
        }
        stack[i] = false;
        return false;
    }
	bool isPossible(int N, vector<pair<int, int> >& prerequisites) {
	    // Code here
	    vector<vector<int>> adj(N+1, vector<int> ());
	    
	    int p = prerequisites.size();
	    for(int i = 0 ; i < p ; i++) {
	        adj[prerequisites[i].first].push_back(prerequisites[i].second);
	    }
	    
	    vector<bool> visited(N+1, false);
	    vector<bool> stack(N+1, false);
	    for(int i = 0 ; i <= N ; i++) {
	        if(!visited[i] && cycle(adj, visited, i, stack)) {
	           // cout<<i<<" ";
	            return false;
	        }
	    }
	    
	    return true;
	}
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
    	int N, P;
        vector<pair<int, int> > prerequisites;
        cin >> N;
        cin >> P;
        for (int i = 0; i < P; ++i) {
            int x, y;
            cin >> x >> y;
            prerequisites.push_back(make_pair(x, y));
        }
        // string s;
        // cin>>s;
        Solution ob;
        if (ob.isPossible(N, prerequisites))
            cout << "Yes";
        else
            cout << "No";
        cout << endl;
	}
	return 0;
}  // } Driver Code Ends