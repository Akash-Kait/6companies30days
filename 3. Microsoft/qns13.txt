// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution
{
	public:
	bool dfs(vector<int> adj[], vector<bool> &visited, int src, int dest) {
	    if(src == dest) return true;
	    visited[src] = true;
	    
	    for(int j = 0 ; j < adj[src].size() ; j++) {
	        if(!visited[adj[src][j]] && dfs(adj, visited, adj[src][j], dest)) return true;
	    }
	    
	    return false;
	}
    //Function to find if the given edge is a bridge in graph.
    int isBridge(int V, vector<int> adj[], int c, int d) 
    {
        // Code here
        vector<int> arr[V];
        for(int i = 0 ; i < V ; i++) {
            for(auto j : adj[i]) {
                if((i == c && j == d) || (i == d && j == c)) continue;
                else arr[i].push_back(j);
            }
        }
        vector<bool> visited(V, false);
        if(dfs(arr, visited, c, d)) return 0;
        
        return 1;
    }
};

// { Driver Code Starts.


int main()
{
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<int> adj[V];
        int i=0;
        while (i++<E) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back (v);
            adj[v].push_back (u);
        }
        
        int c,d;
        cin>>c>>d;
        
        Solution obj;
    	cout << obj.isBridge(V, adj, c, d) << "\n";
    }

    return 0;
}

  // } Driver Code Ends